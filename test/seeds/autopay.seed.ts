import { AutoPaySchema } from 'domain/models';
import { SeedInterface } from '../interfaces';
import { Types } from 'mongoose';
import { processIdMock } from '../mocks';
import { PeriodEnum, ProcessingStatusEnum } from 'infrastructure/enum';

export const autopaySeed: SeedInterface<AutoPaySchema> = {
  collection: AutoPaySchema.name,
  data: [
    {
      _id: new Types.ObjectId(),
      created_at: new Date(),
      updated_at: new Date(),
      is_active: true,
      owner: new Types.ObjectId(),
      data: {},
      period: PeriodEnum.DAY,
      last_run_at: new Date(),
      processing_status: ProcessingStatusEnum.PENDING,
      name: 'test',
      user_id: new Types.ObjectId(),
      process_id: new Types.ObjectId(processIdMock),
      max_amount: 10000,
      allowed_direct_debit: false,
    },
    {
      _id: new Types.ObjectId(),
      created_at: new Date(),
      updated_at: new Date(),
      is_active: false,
      owner: new Types.ObjectId(),
      data: {},
      period: PeriodEnum.DAY,
      last_run_at: new Date(),
      processing_status: ProcessingStatusEnum.PENDING,
      name: 'test2',
      user_id: new Types.ObjectId(),
      process_id: new Types.ObjectId(processIdMock),
      max_amount: 10000,
      allowed_direct_debit: false,
    },
    {
      _id: new Types.ObjectId(),
      created_at: new Date(),
      updated_at: new Date(),
      is_active: true,
      owner: new Types.ObjectId(),
      data: {},
      period: PeriodEnum.DAY,
      last_run_at: new Date(),
      processing_status: ProcessingStatusEnum.PENDING,
      name: 'test3',
      user_id: new Types.ObjectId(),
      process_id: new Types.ObjectId(processIdMock),
      max_amount: 10000,
      allowed_direct_debit: false,
    },
    {
      _id: new Types.ObjectId(),
      created_at: new Date(),
      updated_at: new Date(),
      is_active: true,
      owner: new Types.ObjectId(),
      data: {},
      period: PeriodEnum.DAY,
      last_run_at: new Date(),
      processing_status: ProcessingStatusEnum.PENDING,
      name: 'test4',
      user_id: new Types.ObjectId(),
      process_id: new Types.ObjectId(processIdMock),
      max_amount: 10000,
      allowed_direct_debit: false,
    },
    {
      _id: new Types.ObjectId(),
      created_at: new Date(),
      updated_at: new Date(),
      is_active: true,
      owner: new Types.ObjectId(),
      data: {},
      period: PeriodEnum.DAY,
      last_run_at: new Date(),
      processing_status: ProcessingStatusEnum.PENDING,
      name: 'test5',
      user_id: new Types.ObjectId(),
      process_id: new Types.ObjectId(processIdMock),
      max_amount: 10000,
      allowed_direct_debit: false,
    },
    {
      _id: new Types.ObjectId(),
      created_at: new Date(),
      updated_at: new Date(),
      is_active: true,
      owner: new Types.ObjectId(),
      data: {},
      period: PeriodEnum.DAY,
      last_run_at: new Date(),
      processing_status: ProcessingStatusEnum.PENDING,
      name: 'test6',
      user_id: new Types.ObjectId(),
      process_id: new Types.ObjectId(processIdMock),
      max_amount: 10000,
      allowed_direct_debit: false,
    },
    {
      _id: new Types.ObjectId(),
      created_at: new Date(),
      updated_at: new Date(),
      is_active: true,
      owner: new Types.ObjectId(),
      data: {},
      period: PeriodEnum.DAY,
      last_run_at: new Date(),
      processing_status: ProcessingStatusEnum.PENDING,
      name: 'test7',
      user_id: new Types.ObjectId(),
      process_id: new Types.ObjectId(processIdMock),
      max_amount: 10000,
      allowed_direct_debit: false,
    },
  ],
};
